#!/usr/bin/env php
<?php
// Make sure this script is being run over the PHP CLI!
if ('cli' !== php_sapi_name()) {
	return;
}

require_once __DIR__ . '/../index.php';

use function PhpcsChanged\Cli\printHelp;
use function PhpcsChanged\Cli\printVersion;
use function PhpcsChanged\Cli\printErrorAndExit;
use function PhpcsChanged\Cli\getDebug;
use function PhpcsChanged\Cli\runManualWorkflow;
use function PhpcsChanged\Cli\runSvnWorkflow;
use function PhpcsChanged\Cli\runGitWorkflow;
use function PhpcsChanged\Cli\reportMessagesAndExit;
use function PhpcsChanged\Cli\fileHasValidExtension;
use PhpcsChanged\UnixShell;

$optind = 0;
$long_options = [
  'help',
  'version',
  'diff:',
  'phpcs-orig:',
  'phpcs-new:',
  'svn',
  'git',
  'git-unstaged',
  'git-staged',
  'git-branch:',
  'standard:',
  'report:',
  'debug'
];
$options = getopt(
	'hs',
	$long_options,
	$optind
);

$fileNames = array_slice($argv, $optind);
$fileNamesExpanded = [];
foreach( $fileNames as $file ) {
	if (is_dir($file)) {
		$iterator = new RecursiveIteratorIterator(new RecursiveCallbackFilterIterator(new RecursiveDirectoryIterator($file, (RecursiveDirectoryIterator::SKIP_DOTS | FilesystemIterator::FOLLOW_SYMLINKS)), function($file, $key, $iterator){

			if ($file->isFile() && !fileHasValidExtension($file)) {
				return false;
			}
			return $iterator->hasChildren() || $file->isFile() ? true : false;
		}));
		foreach ($iterator as $file) {
			$fileNamesExpanded[] = $file->getPathName();
		}
	} else {
		$fileNamesExpanded[] = $file;
	}
}

if (isset($options['h']) || isset($options['help'])) {
	printHelp();
	exit(0);
}

if (isset($options['version'])) {
	printVersion();
}

$debug = getDebug(isset($options['debug']));
run($options, $fileNamesExpanded, $debug);

function run(array $options, array $fileNamesExpanded, callable $debug) {
	$debug('Running on filenames: ' . implode(', ', $fileNamesExpanded));
	$reportType = isset($options['report']) ? $options['report'] : 'full';
	$diffFile = isset($options['diff']) ? $options['diff'] : NULL;
	$phpcsOldFile = isset($options['phpcs-orig']) ? $options['phpcs-orig'] : NULL;
	$phpcsNewFile = isset($options['phpcs-new']) ? $options['phpcs-new'] : NULL;

	if ($diffFile && $phpcsOldFile && $phpcsNewFile) {
		reportMessagesAndExit(
			runManualWorkflow($diffFile, $phpcsOldFile, $phpcsNewFile),
			$reportType,
			$options
		);
		return;
	}

	if ((isset($options['svn']) || isset($options['git'])) && empty($fileNamesExpanded)) {
		printErrorAndExit('You must supply at least one file or directory to process.');
		return;
	}

	if (isset($options['svn'])) {
		$shell = new UnixShell();
		reportMessagesAndExit(
			runSvnWorkflow($fileNamesExpanded, $options, $shell, $debug),
			$reportType,
			$options
		);
		return;
	}

	if (isset($options['git'])) {
		$shell = new UnixShell();
		reportMessagesAndExit(
			runGitWorkflow($fileNamesExpanded, $options, $shell, $debug),
			$reportType,
			$options
		);
		return;
	}

	if (count($options) > 0) {
		printErrorAndExit('You must use either manual or automatic mode.');
		return;
	}
	printHelp();
	exit(1);
}

